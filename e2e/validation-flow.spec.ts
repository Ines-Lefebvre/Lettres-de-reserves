import { test, expect } from '@playwright/test';

/**
 * Tests E2E : Happy Path - Flow de validation complet
 *
 * VÃ©rifie que le parcours utilisateur principal fonctionne correctement :
 * - Navigation
 * - Chargement des donnÃ©es
 * - Switch entre stratÃ©gies
 */

test.describe('Validation Flow - Happy Path', () => {

  test('should load validation page with requestId', async ({ page }) => {
    console.log('ðŸ§ª Test: Load validation page with requestId');

    // 1. Navigation vers la page de validation avec un requestId
    await page.goto('/validation-new?requestId=test_12345');

    // 2. Attendre que la page soit chargÃ©e
    await page.waitForLoadState('networkidle');

    // 3. VÃ©rifier que le Request ID est affichÃ©
    await expect(page.getByText(/request id/i)).toBeVisible({ timeout: 5000 });
    await expect(page.getByText(/test_12345/i)).toBeVisible();

    // 4. VÃ©rifier que les stratÃ©gies sont affichÃ©es
    await expect(page.getByRole('tab', { name: /n8n/i })).toBeVisible();
    await expect(page.getByRole('tab', { name: /localstorage/i })).toBeVisible();
    await expect(page.getByRole('tab', { name: /supabase/i })).toBeVisible();

    console.log('âœ… Page loaded successfully with requestId');
  });

  test('should display loading state when fetching data', async ({ page }) => {
    console.log('ðŸ§ª Test: Display loading state');

    // 1. Aller sur la page de validation
    await page.goto('/validation-new?requestId=test_loading');

    // 2. VÃ©rifier que l'Ã©tat loading s'affiche
    const loadingText = page.getByText(/chargement|loading/i);

    // Le loading peut Ãªtre rapide, donc on vÃ©rifie qu'il apparaÃ®t ou qu'on a dÃ©jÃ  les donnÃ©es
    const hasLoadingOrData = await Promise.race([
      loadingText.waitFor({ state: 'visible', timeout: 2000 }).then(() => true).catch(() => false),
      page.getByText(/succÃ¨s|donnÃ©es chargÃ©es/i).waitFor({ state: 'visible', timeout: 2000 }).then(() => true).catch(() => false)
    ]);

    expect(hasLoadingOrData).toBe(true);

    console.log('âœ… Loading state handled correctly');
  });

  test('should switch between validation strategies', async ({ page }) => {
    console.log('ðŸ§ª Test: Switch between strategies');

    // 1. Aller sur la page de validation
    await page.goto('/validation-new?requestId=test_switch');
    await page.waitForLoadState('networkidle');

    // 2. VÃ©rifier que N8N est sÃ©lectionnÃ© par dÃ©faut
    const n8nButton = page.getByRole('tab', { name: /n8n/i });
    await expect(n8nButton).toHaveAttribute('aria-selected', 'true');

    // 3. Cliquer sur LocalStorage
    const localStorageButton = page.getByRole('tab', { name: /localstorage/i });
    await localStorageButton.click();

    // Attendre un peu pour que l'Ã©tat se mette Ã  jour
    await page.waitForTimeout(500);

    await expect(localStorageButton).toHaveAttribute('aria-selected', 'true');
    await expect(n8nButton).toHaveAttribute('aria-selected', 'false');

    // 4. Cliquer sur Supabase
    const supabaseButton = page.getByRole('tab', { name: /supabase/i });
    await supabaseButton.click();

    await page.waitForTimeout(500);

    await expect(supabaseButton).toHaveAttribute('aria-selected', 'true');
    await expect(localStorageButton).toHaveAttribute('aria-selected', 'false');

    console.log('âœ… Strategy switching works correctly');
  });

  test('should display validation data when loaded', async ({ page }) => {
    console.log('ðŸ§ª Test: Display validation data');

    // 1. Aller sur la page
    await page.goto('/validation-new?requestId=test_data');
    await page.waitForLoadState('networkidle');

    // 2. Attendre que les donnÃ©es se chargent (ou qu'une erreur s'affiche)
    await Promise.race([
      page.getByText(/succÃ¨s|donnÃ©es chargÃ©es/i).waitFor({ state: 'visible', timeout: 30000 }),
      page.getByText(/erreur|aucune donnÃ©e/i).waitFor({ state: 'visible', timeout: 30000 })
    ]);

    // 3. VÃ©rifier qu'on a soit des donnÃ©es, soit un message clair
    const hasSuccessOrError = await page.locator('text=/succÃ¨s|donnÃ©es chargÃ©es|erreur|aucune donnÃ©e/i').isVisible();
    expect(hasSuccessOrError).toBe(true);

    console.log('âœ… Data display handled correctly');
  });

  test('should maintain requestId in URL during navigation', async ({ page }) => {
    console.log('ðŸ§ª Test: Maintain requestId in URL');

    const requestId = 'test_url_persistence';

    // 1. Aller sur la page avec un requestId
    await page.goto(`/validation-new?requestId=${requestId}`);

    // 2. VÃ©rifier que l'URL contient le requestId
    expect(page.url()).toContain(requestId);

    // 3. Changer de stratÃ©gie
    const localStorageButton = page.getByRole('tab', { name: /localstorage/i });
    await localStorageButton.click();
    await page.waitForTimeout(500);

    // 4. VÃ©rifier que le requestId est toujours dans l'URL
    expect(page.url()).toContain(requestId);

    console.log('âœ… RequestId persists in URL');
  });

  test('should have proper page title and heading', async ({ page }) => {
    console.log('ðŸ§ª Test: Page title and heading');

    await page.goto('/validation-new?requestId=test_title');

    // VÃ©rifier le titre de la page
    await expect(page).toHaveTitle(/validation|lettres de rÃ©serves/i);

    // VÃ©rifier le heading principal
    const heading = page.locator('h1, h2').first();
    await expect(heading).toBeVisible();

    console.log('âœ… Page title and heading are correct');
  });
});

test.describe('Validation Flow - Edge Cases', () => {

  test('should handle very long requestId', async ({ page }) => {
    console.log('ðŸ§ª Test: Handle very long requestId');

    const longRequestId = 'test_' + 'a'.repeat(100);
    await page.goto(`/validation-new?requestId=${longRequestId}`);

    // VÃ©rifier que la page charge sans crash
    await page.waitForLoadState('networkidle');

    const hasContent = await page.locator('body').isVisible();
    expect(hasContent).toBe(true);

    console.log('âœ… Long requestId handled correctly');
  });

  test('should handle special characters in requestId', async ({ page }) => {
    console.log('ðŸ§ª Test: Handle special characters');

    const specialRequestId = 'test_123-abc_XYZ';
    await page.goto(`/validation-new?requestId=${specialRequestId}`);

    await page.waitForLoadState('networkidle');

    // VÃ©rifier que le requestId est bien affichÃ©
    await expect(page.getByText(new RegExp(specialRequestId, 'i'))).toBeVisible({ timeout: 5000 });

    console.log('âœ… Special characters handled correctly');
  });

  test('should handle rapid strategy switching', async ({ page }) => {
    console.log('ðŸ§ª Test: Rapid strategy switching');

    await page.goto('/validation-new?requestId=test_rapid');
    await page.waitForLoadState('networkidle');

    // Cliquer rapidement sur toutes les stratÃ©gies
    const n8nButton = page.getByRole('tab', { name: /n8n/i });
    const localStorageButton = page.getByRole('tab', { name: /localstorage/i });
    const supabaseButton = page.getByRole('tab', { name: /supabase/i });

    await n8nButton.click();
    await localStorageButton.click();
    await supabaseButton.click();
    await n8nButton.click();

    // Attendre un peu
    await page.waitForTimeout(1000);

    // VÃ©rifier qu'il n'y a pas d'erreur affichÃ©e
    const hasError = await page.getByText(/erreur inattendue|crash|exception/i).isVisible().catch(() => false);
    expect(hasError).toBe(false);

    console.log('âœ… Rapid switching handled without errors');
  });
});
