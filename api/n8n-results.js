// Endpoint principal pour recevoir les donn√©es de n8n
export default function handler(req, res) {
  // Configuration CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

  // Gestion des requ√™tes OPTIONS (preflight)
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  // Seules les requ√™tes POST sont accept√©es
  if (req.method !== 'POST') {
    console.log(`‚ùå M√©thode ${req.method} non autoris√©e sur /api/n8n-results`);
    return res.status(405).json({ 
      error: 'M√©thode non autoris√©e', 
      allowedMethods: ['POST'] 
    });
  }

  try {
    // R√©cup√©ration des donn√©es
    const receivedData = req.body;
    const timestamp = new Date().toISOString();
    const userAgent = req.headers['user-agent'] || 'Unknown';
    const clientIP = req.headers['x-forwarded-for'] || req.connection.remoteAddress || 'Unknown';

    // Logs d√©taill√©s en console
    console.log('\nüîÑ ===== DONN√âES RE√áUES DE N8N =====');
    console.log(`üìÖ Timestamp: ${timestamp}`);
    console.log(`üåê IP Client: ${clientIP}`);
    console.log(`üñ•Ô∏è  User-Agent: ${userAgent}`);
    console.log(`üìä Taille des donn√©es: ${JSON.stringify(receivedData).length} caract√®res`);
    console.log('\nüìã DONN√âES COMPL√àTES:');
    console.log(JSON.stringify(receivedData, null, 2));
    console.log('\nüîç R√âSUM√â EXTRAIT:');
    
    // Extraction du r√©sum√©
    const summary = {
      sessionId: receivedData?.sessionId || 'Non d√©fini',
      status: receivedData?.status || 'Non d√©fini',
      employeur: receivedData?.summary?.employeur || receivedData?.employeur || 'Non d√©fini',
      victime: receivedData?.summary?.victime || receivedData?.victime || 'Non d√©fini',
      completude: receivedData?.summary?.completude || receivedData?.completude || 'Non d√©fini',
      typeFormulaire: receivedData?.summary?.typeFormulaire || receivedData?.typeFormulaire || 'Non d√©fini',
      sourceFile: receivedData?.sourceFile || 'Non d√©fini'
    };

    console.log(JSON.stringify(summary, null, 2));
    console.log('üîÑ ================================\n');

    // Sauvegarde en m√©moire globale
    global.lastN8nResult = {
      data: receivedData,
      summary: summary,
      receivedAt: timestamp,
      clientInfo: {
        ip: clientIP,
        userAgent: userAgent
      }
    };

    // R√©ponse de confirmation
    const response = {
      success: true,
      message: 'Donn√©es re√ßues et trait√©es avec succ√®s',
      receivedAt: timestamp,
      dataSize: JSON.stringify(receivedData).length,
      summary: summary
    };

    console.log(`‚úÖ R√©ponse envoy√©e √† n8n: ${JSON.stringify(response)}`);
    
    res.status(200).json(response);

  } catch (error) {
    console.error('‚ùå Erreur lors du traitement des donn√©es n8n:', error);
    
    res.status(500).json({
      success: false,
      error: 'Erreur interne du serveur',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
}