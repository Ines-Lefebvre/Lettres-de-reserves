{
  "name": "Webhook Auth - Simple CORS",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "auth",
        "options": {
          "rawBody": true
        }
      },
      "id": "webhook-auth",
      "name": "Webhook Auth",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// Validation CORS et extraction des donn√©es\nconst allowedOrigins = ['https://landing-page-convers-h8da.bolt.host'];\nconst requestOrigin = $request.headers.origin;\n\nconsole.log('üîí CORS Check Auth:', {\n  requestOrigin,\n  allowedOrigins,\n  method: $request.method,\n  contentType: $request.headers['content-type']\n});\n\n// V√©rification origine\nif (!requestOrigin || !allowedOrigins.includes(requestOrigin)) {\n  console.log('‚ùå CORS BLOCKED:', requestOrigin);\n  return {\n    statusCode: 403,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': requestOrigin || '*'\n    },\n    body: {\n      ok: false,\n      error: 'origin_not_allowed',\n      requestedOrigin: requestOrigin\n    }\n  };\n}\n\n// Extraction des donn√©es du FormData\nconst formData = $request.body;\nconst action = formData.action;\nconst email = formData.email;\nconst password = formData.password;\nconst requestId = formData.requestId;\nconst idempotencyKey = formData.idempotencyKey;\n\nconsole.log('üìß Auth Request:', {\n  action,\n  email: email ? email.substring(0, 3) + '***' : 'missing',\n  hasPassword: !!password,\n  requestId,\n  idempotencyKey\n});\n\n// Validation des champs requis\nif (!action || !email || !password) {\n  return {\n    statusCode: 400,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': requestOrigin\n    },\n    body: {\n      ok: false,\n      error: 'missing_fields',\n      message: 'Action, email et password sont requis'\n    }\n  };\n}\n\nif (!['login', 'register'].includes(action)) {\n  return {\n    statusCode: 400,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': requestOrigin\n    },\n    body: {\n      ok: false,\n      error: 'invalid_action',\n      message: 'Action doit √™tre login ou register'\n    }\n  };\n}\n\n// Passer les donn√©es au n≈ìud suivant\nreturn {\n  validatedOrigin: requestOrigin,\n  action,\n  email,\n  password,\n  requestId,\n  idempotencyKey,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "cors-validation",
      "name": "CORS Validation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "action-condition",
              "leftValue": "={{ $json.action }}",
              "rightValue": "register",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "action-switch",
      "name": "Action Switch",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Logique d'inscription\nconst { email, password, requestId, validatedOrigin } = $input.first();\n\nconsole.log('üìù Register:', { email: email.substring(0, 3) + '***', requestId });\n\n// Simulation de cr√©ation d'utilisateur\n// En production, ici tu ferais :\n// - V√©rifier si l'email existe d√©j√†\n// - Hasher le mot de passe\n// - Cr√©er l'utilisateur en base\n// - G√©n√©rer un JWT\n\n// G√©n√©ration d'un JWT factice (remplace par ta logique)\nconst userId = 'user_' + Date.now();\nconst token = 'jwt_' + Buffer.from(JSON.stringify({\n  userId,\n  email,\n  exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60) // 24h\n})).toString('base64');\n\nreturn {\n  statusCode: 200,\n  headers: {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': validatedOrigin\n  },\n  body: {\n    ok: true,\n    token,\n    user: {\n      id: userId,\n      email\n    },\n    redirect: '/upload',\n    message: 'Inscription r√©ussie'\n  }\n};"
      },
      "id": "register-logic",
      "name": "Register Logic",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 200]
    },
    {
      "parameters": {
        "jsCode": "// Logique de connexion\nconst { email, password, requestId, validatedOrigin } = $input.first();\n\nconsole.log('üîê Login:', { email: email.substring(0, 3) + '***', requestId });\n\n// Simulation de v√©rification utilisateur\n// En production, ici tu ferais :\n// - Chercher l'utilisateur par email\n// - V√©rifier le mot de passe hash√©\n// - G√©n√©rer un JWT\n\n// G√©n√©ration d'un JWT factice (remplace par ta logique)\nconst userId = 'user_existing_' + email.replace('@', '_').replace('.', '_');\nconst token = 'jwt_' + Buffer.from(JSON.stringify({\n  userId,\n  email,\n  exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60) // 24h\n})).toString('base64');\n\nreturn {\n  statusCode: 200,\n  headers: {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': validatedOrigin\n  },\n  body: {\n    ok: true,\n    token,\n    user: {\n      id: userId,\n      email\n    },\n    redirect: '/upload',\n    message: 'Connexion r√©ussie'\n  }\n};"
      },
      "id": "login-logic",
      "name": "Login Logic",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json.body }}",
        "options": {\n          \"responseHeaders\": {\n            \"entries\": [\n              {\n                \"name\": \"Access-Control-Allow-Origin\",\n                \"value\": \"={{ $json.headers['Access-Control-Allow-Origin'] }}\"\n              },\n              {\n                \"name\": \"Content-Type\",\n                \"value\": \"application/json\"\n              }\n            ]\n          }\n        }\n      },\n      \"id\": \"response-auth\",\n      \"name\": \"Response Auth\",\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"typeVersion\": 1,\n      \"position\": [1120, 300]\n    }\n  ],\n  \"connections\": {\n    \"webhook-auth\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"cors-validation\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"cors-validation\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"action-switch\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"action-switch\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"register-logic\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"login-logic\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"register-logic\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"response-auth\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"login-logic\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"response-auth\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }\n}