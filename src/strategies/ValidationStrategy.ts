/**
 * Classe abstraite d√©finissant le contrat pour toutes les strat√©gies de validation
 *
 * Cette classe impl√©mente le pattern Strategy pour permettre diff√©rentes
 * sources de donn√©es (n8n, localStorage, Supabase) tout en maintenant
 * une interface uniforme.
 *
 * PRINCIPES:
 * - Chaque strat√©gie doit impl√©menter load(), save(), validate()
 * - Gestion d'erreur unifi√©e
 * - Logging centralis√©
 * - Type safety compl√®te
 *
 * @abstract
 * @class ValidationStrategy
 * @version 1.0.0
 */

import type {
  ExtractedData,
  ValidationResult,
  ValidationMetadata,
  ValidationContext,
  SaveResult,
  StrategyLifecycleEvent
} from './types';

export abstract class ValidationStrategy {
  /**
   * Nom unique de la strat√©gie
   */
  abstract readonly name: string;

  /**
   * Description de la strat√©gie
   */
  abstract readonly description: string;

  /**
   * Priorit√© d'ex√©cution (plus petit = plus prioritaire)
   */
  abstract readonly priority: number;

  /**
   * Active ou d√©sactive les logs de debug
   */
  protected logDebug: boolean = false;

  /**
   * Contexte d'ex√©cution
   */
  protected context: ValidationContext;

  /**
   * √âv√©nements du cycle de vie
   */
  protected lifecycleEvents: StrategyLifecycleEvent[] = [];

  /**
   * Constructeur
   *
   * @param context - Contexte d'ex√©cution
   * @param logDebug - Active les logs de debug
   */
  constructor(context: ValidationContext, logDebug: boolean = false) {
    this.context = context;
    this.logDebug = logDebug;
    this.emitLifecycleEvent('init', { context });
  }

  /**
   * Charge les donn√©es depuis la source
   *
   * @abstract
   * @returns Promise<ValidationResult>
   */
  abstract load(): Promise<ValidationResult>;

  /**
   * Sauvegarde les donn√©es vers la destination
   *
   * @abstract
   * @param data - Donn√©es √† sauvegarder
   * @returns Promise<SaveResult>
   */
  abstract save(data: ExtractedData): Promise<SaveResult>;

  /**
   * Valide les donn√©es selon les r√®gles de la strat√©gie
   *
   * @abstract
   * @param data - Donn√©es √† valider
   * @returns Promise<ValidationResult>
   */
  abstract validate(data: ExtractedData): Promise<ValidationResult>;

  /**
   * V√©rifie si la strat√©gie peut √™tre utilis√©e
   *
   * @abstract
   * @returns Promise<boolean>
   */
  abstract canUse(): Promise<boolean>;

  /**
   * Log un message de debug
   *
   * @protected
   * @param message - Message √† logger
   * @param data - Donn√©es additionnelles
   */
  protected log(message: string, data?: any): void {
    if (this.logDebug) {
      console.log(`[${this.name}] ${message}`, data || '');
    }
  }

  /**
   * Log une erreur
   *
   * @protected
   * @param message - Message d'erreur
   * @param error - Erreur d'origine
   */
  protected logError(message: string, error?: any): void {
    console.error(`[${this.name}] ‚ùå ${message}`, error || '');
  }

  /**
   * Cr√©e les m√©tadonn√©es pour un r√©sultat
   *
   * @protected
   * @param additionalData - Donn√©es additionnelles
   * @returns ValidationMetadata
   */
  protected createMetadata(additionalData?: Record<string, any>): ValidationMetadata {
    return {
      timestamp: Date.now(),
      requestId: this.context.requestId,
      source: this.getSourceType(),
      ...additionalData
    };
  }

  /**
   * Retourne le type de source de la strat√©gie
   *
   * @protected
   * @returns 'n8n' | 'localStorage' | 'supabase'
   */
  protected abstract getSourceType(): 'n8n' | 'localStorage' | 'supabase';

  /**
   * √âmet un √©v√©nement du cycle de vie
   *
   * @protected
   * @param type - Type d'√©v√©nement
   * @param data - Donn√©es de l'√©v√©nement
   */
  protected emitLifecycleEvent(
    type: StrategyLifecycleEvent['type'],
    data?: any
  ): void {
    const event: StrategyLifecycleEvent = {
      type,
      timestamp: Date.now(),
      strategyName: this.name,
      data
    };

    this.lifecycleEvents.push(event);

    if (this.logDebug) {
      console.log(`[${this.name}] üîÑ Lifecycle: ${type}`, data || '');
    }
  }

  /**
   * Nettoie les ressources utilis√©es par la strat√©gie
   *
   * @public
   */
  public cleanup(): void {
    this.emitLifecycleEvent('cleanup');
    this.log('Cleanup completed');
  }

  /**
   * Retourne les √©v√©nements du cycle de vie
   *
   * @public
   * @returns StrategyLifecycleEvent[]
   */
  public getLifecycleEvents(): StrategyLifecycleEvent[] {
    return [...this.lifecycleEvents];
  }

  /**
   * Retourne le contexte d'ex√©cution
   *
   * @public
   * @returns ValidationContext
   */
  public getContext(): ValidationContext {
    return { ...this.context };
  }

  /**
   * Met √† jour le contexte d'ex√©cution
   *
   * @public
   * @param context - Nouveau contexte partiel
   */
  public updateContext(context: Partial<ValidationContext>): void {
    this.context = { ...this.context, ...context };
    this.log('Context updated', this.context);
  }
}

export default ValidationStrategy;
